// Templates
_binary_exp{child,op}: child | child op child
_delimited_exp{child,op}: child | child (op child)+
_comma_delimited{item}: [ item ("," item)* ","? ]
_line_delimited{item}: [ item (","? item)* ","? ]

// Definitions
definitions: _line_delimited{ _script_definition }
_script_definition: model_def | alias_def

alias_def: "type" TYPE ":" exp

model_def: "model" TYPE index+ "{" _line_delimited{ _model_definition } "}"

_model_definition: model_def | alias_def | edge_def

index: "(" _comma_delimited{ EDGE } ")"

edge_def: EDGE CARDINALITY? ":" type_exp

CARDINALITY: "*" | "?" | "+" | "!"

?type_exp: exp
         | model_def

// Expressions
?exp: or_exp

?or_exp: _delimited_exp{xor_exp, "|"}
?xor_exp: _delimited_exp{and_exp, "^"}
?and_exp: _delimited_exp{comp_exp, "&"}

?comp_exp: _binary_exp{mult_exp, COMPARISON_OP}
COMPARISON_OP: "!=" | "==" | ">=" | "<=" | ">" | "<"

?mult_exp: _binary_exp{add_exp, MULTIPLICATION_OP}
MULTIPLICATION_OP: "*" | "/" | "%"

?add_exp: _binary_exp{unary_exp, ADDITION_OP}
ADDITION_OP: "+" | "-"

?unary_exp: value_exp
          | UNARY_OP value_exp
UNARY_OP: "!" | "~"

?value_exp: dot_exp
          | literal

?dot_exp: _delimited_exp{filter_exp, "."}

?filter_exp: atom_exp
           | atom_exp "[" [ exp ] "]"

?atom_exp: identifier
         | "(" exp ")"

// General
identifier: TYPE | EDGE

literal: SIGNED_NUMBER
       | ESCAPED_STRING

TYPE: /[A-Z][a-z][a-zA-Z]*/
EDGE: /[a-z][a-z_]*/

DIGIT: "0".."9"

INT: DIGIT+
SIGNED_INT: ["+"|"-"] INT
DECIMAL: INT "." INT

_EXP: ("e"|"E") SIGNED_INT
FLOAT: INT _EXP | DECIMAL _EXP?
SIGNED_FLOAT: ["+"|"-"] FLOAT

NUMBER: FLOAT | INT
SIGNED_NUMBER: ["+"|"-"] NUMBER

%import common.NEWLINE
%import common.WS
%import common.ESCAPED_STRING
%import common.SH_COMMENT
%ignore WS
%ignore SH_COMMENT